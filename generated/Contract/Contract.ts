// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimCleared extends ethereum.Event {
  get params(): ClaimCleared__Params {
    return new ClaimCleared__Params(this);
  }
}

export class ClaimCleared__Params {
  _event: ClaimCleared;

  constructor(event: ClaimCleared) {
    this._event = event;
  }

  get lostAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ClaimDeleted extends ethereum.Event {
  get params(): ClaimDeleted__Params {
    return new ClaimDeleted__Params(this);
  }
}

export class ClaimDeleted__Params {
  _event: ClaimDeleted;

  constructor(event: ClaimDeleted) {
    this._event = event;
  }

  get lostAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimMade extends ethereum.Event {
  get params(): ClaimMade__Params {
    return new ClaimMade__Params(this);
  }
}

export class ClaimMade__Params {
  _event: ClaimMade;

  constructor(event: ClaimMade) {
    this._event = event;
  }

  get lostAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get balance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimPeriodChanged extends ethereum.Event {
  get params(): ClaimPeriodChanged__Params {
    return new ClaimPeriodChanged__Params(this);
  }
}

export class ClaimPeriodChanged__Params {
  _event: ClaimPeriodChanged;

  constructor(event: ClaimPeriodChanged) {
    this._event = event;
  }

  get newClaimPeriodInDays(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ClaimResolved extends ethereum.Event {
  get params(): ClaimResolved__Params {
    return new ClaimResolved__Params(this);
  }
}

export class ClaimResolved__Params {
  _event: ClaimResolved;

  constructor(event: ClaimResolved) {
    this._event = event;
  }

  get lostAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get collateral(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CustomClaimCollateralChanged extends ethereum.Event {
  get params(): CustomClaimCollateralChanged__Params {
    return new CustomClaimCollateralChanged__Params(this);
  }
}

export class CustomClaimCollateralChanged__Params {
  _event: CustomClaimCollateralChanged;

  constructor(event: CustomClaimCollateralChanged) {
    this._event = event;
  }

  get newCustomCollateralAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newCustomCollareralRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MigrationSucceeded extends ethereum.Event {
  get params(): MigrationSucceeded__Params {
    return new MigrationSucceeded__Params(this);
  }
}

export class MigrationSucceeded__Params {
  _event: MigrationSucceeded;

  constructor(event: MigrationSucceeded) {
    this._event = event;
  }

  get newContractAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__claimsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: Address;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimPeriod(): BigInt {
    let result = super.call("claimPeriod", "claimPeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_claimPeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("claimPeriod", "claimPeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claims(param0: Address): Contract__claimsResult {
    let result = super.call(
      "claims",
      "claims(address):(address,uint256,uint256,address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new Contract__claimsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress()
    );
  }

  try_claims(param0: Address): ethereum.CallResult<Contract__claimsResult> {
    let result = super.tryCall(
      "claims",
      "claims(address):(address,uint256,uint256,address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__claimsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress()
      )
    );
  }

  customCollateralAddress(): Address {
    let result = super.call(
      "customCollateralAddress",
      "customCollateralAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_customCollateralAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "customCollateralAddress",
      "customCollateralAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  customCollateralRate(): BigInt {
    let result = super.call(
      "customCollateralRate",
      "customCollateralRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_customCollateralRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "customCollateralRate",
      "customCollateralRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getClaimDeleter(): Address {
    let result = super.call(
      "getClaimDeleter",
      "getClaimDeleter():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getClaimDeleter(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getClaimDeleter",
      "getClaimDeleter():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getClaimant(lostAddress: Address): Address {
    let result = super.call("getClaimant", "getClaimant(address):(address)", [
      ethereum.Value.fromAddress(lostAddress)
    ]);

    return result[0].toAddress();
  }

  try_getClaimant(lostAddress: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getClaimant",
      "getClaimant(address):(address)",
      [ethereum.Value.fromAddress(lostAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getCollateral(lostAddress: Address): BigInt {
    let result = super.call(
      "getCollateral",
      "getCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(lostAddress)]
    );

    return result[0].toBigInt();
  }

  try_getCollateral(lostAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateral",
      "getCollateral(address):(uint256)",
      [ethereum.Value.fromAddress(lostAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralRate(collateralType: Address): BigInt {
    let result = super.call(
      "getCollateralRate",
      "getCollateralRate(address):(uint256)",
      [ethereum.Value.fromAddress(collateralType)]
    );

    return result[0].toBigInt();
  }

  try_getCollateralRate(collateralType: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCollateralRate",
      "getCollateralRate(address):(uint256)",
      [ethereum.Value.fromAddress(collateralType)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCollateralType(lostAddress: Address): Address {
    let result = super.call(
      "getCollateralType",
      "getCollateralType(address):(address)",
      [ethereum.Value.fromAddress(lostAddress)]
    );

    return result[0].toAddress();
  }

  try_getCollateralType(lostAddress: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getCollateralType",
      "getCollateralType(address):(address)",
      [ethereum.Value.fromAddress(lostAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTimeStamp(lostAddress: Address): BigInt {
    let result = super.call("getTimeStamp", "getTimeStamp(address):(uint256)", [
      ethereum.Value.fromAddress(lostAddress)
    ]);

    return result[0].toBigInt();
  }

  try_getTimeStamp(lostAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimeStamp",
      "getTimeStamp(address):(uint256)",
      [ethereum.Value.fromAddress(lostAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isBinding(): boolean {
    let result = super.call("isBinding", "isBinding():(bool)", []);

    return result[0].toBoolean();
  }

  try_isBinding(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isBinding", "isBinding():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isRecoveryEnabled(target: Address): boolean {
    let result = super.call(
      "isRecoveryEnabled",
      "isRecoveryEnabled(address):(bool)",
      [ethereum.Value.fromAddress(target)]
    );

    return result[0].toBoolean();
  }

  try_isRecoveryEnabled(target: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isRecoveryEnabled",
      "isRecoveryEnabled(address):(bool)",
      [ethereum.Value.fromAddress(target)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  offer(): Address {
    let result = super.call("offer", "offer():(address)", []);

    return result[0].toAddress();
  }

  try_offer(): ethereum.CallResult<Address> {
    let result = super.tryCall("offer", "offer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  quorum(): BigInt {
    let result = super.call("quorum", "quorum():(uint256)", []);

    return result[0].toBigInt();
  }

  try_quorum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("quorum", "quorum():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  recoveryDisabled(param0: Address): boolean {
    let result = super.call(
      "recoveryDisabled",
      "recoveryDisabled(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_recoveryDisabled(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "recoveryDisabled",
      "recoveryDisabled(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  terms(): string {
    let result = super.call("terms", "terms():(string)", []);

    return result[0].toString();
  }

  try_terms(): ethereum.CallResult<string> {
    let result = super.tryCall("terms", "terms():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferAndCall(recipient: Address, amount: BigInt, data: Bytes): boolean {
    let result = super.call(
      "transferAndCall",
      "transferAndCall(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferAndCall(
    recipient: Address,
    amount: BigInt,
    data: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferAndCall",
      "transferAndCall(address,uint256,bytes):(bool)",
      [
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromBytes(data)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unwrapConversionFactor(): BigInt {
    let result = super.call(
      "unwrapConversionFactor",
      "unwrapConversionFactor():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_unwrapConversionFactor(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unwrapConversionFactor",
      "unwrapConversionFactor():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votePeriod(): BigInt {
    let result = super.call("votePeriod", "votePeriod():(uint256)", []);

    return result[0].toBigInt();
  }

  try_votePeriod(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("votePeriod", "votePeriod():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  wrapped(): Address {
    let result = super.call("wrapped", "wrapped():(address)", []);

    return result[0].toAddress();
  }

  try_wrapped(): ethereum.CallResult<Address> {
    let result = super.tryCall("wrapped", "wrapped():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _terms(): string {
    return this._call.inputValues[0].value.toString();
  }

  get offerFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get wrappedToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get quorum(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get votePeriod(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ClearClaimCall extends ethereum.Call {
  get inputs(): ClearClaimCall__Inputs {
    return new ClearClaimCall__Inputs(this);
  }

  get outputs(): ClearClaimCall__Outputs {
    return new ClearClaimCall__Outputs(this);
  }
}

export class ClearClaimCall__Inputs {
  _call: ClearClaimCall;

  constructor(call: ClearClaimCall) {
    this._call = call;
  }
}

export class ClearClaimCall__Outputs {
  _call: ClearClaimCall;

  constructor(call: ClearClaimCall) {
    this._call = call;
  }
}

export class DeclareLostCall extends ethereum.Call {
  get inputs(): DeclareLostCall__Inputs {
    return new DeclareLostCall__Inputs(this);
  }

  get outputs(): DeclareLostCall__Outputs {
    return new DeclareLostCall__Outputs(this);
  }
}

export class DeclareLostCall__Inputs {
  _call: DeclareLostCall;

  constructor(call: DeclareLostCall) {
    this._call = call;
  }

  get collateralType(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get lostAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DeclareLostCall__Outputs {
  _call: DeclareLostCall;

  constructor(call: DeclareLostCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DeleteClaimCall extends ethereum.Call {
  get inputs(): DeleteClaimCall__Inputs {
    return new DeleteClaimCall__Inputs(this);
  }

  get outputs(): DeleteClaimCall__Outputs {
    return new DeleteClaimCall__Outputs(this);
  }
}

export class DeleteClaimCall__Inputs {
  _call: DeleteClaimCall;

  constructor(call: DeleteClaimCall) {
    this._call = call;
  }

  get lostAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DeleteClaimCall__Outputs {
  _call: DeleteClaimCall;

  constructor(call: DeleteClaimCall) {
    this._call = call;
  }
}

export class DragCall extends ethereum.Call {
  get inputs(): DragCall__Inputs {
    return new DragCall__Inputs(this);
  }

  get outputs(): DragCall__Outputs {
    return new DragCall__Outputs(this);
  }
}

export class DragCall__Inputs {
  _call: DragCall;

  constructor(call: DragCall) {
    this._call = call;
  }

  get buyer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get currency(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DragCall__Outputs {
  _call: DragCall;

  constructor(call: DragCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MakeAcquisitionOfferCall extends ethereum.Call {
  get inputs(): MakeAcquisitionOfferCall__Inputs {
    return new MakeAcquisitionOfferCall__Inputs(this);
  }

  get outputs(): MakeAcquisitionOfferCall__Outputs {
    return new MakeAcquisitionOfferCall__Outputs(this);
  }
}

export class MakeAcquisitionOfferCall__Inputs {
  _call: MakeAcquisitionOfferCall;

  constructor(call: MakeAcquisitionOfferCall) {
    this._call = call;
  }

  get salt(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get pricePerShare(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get currency(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class MakeAcquisitionOfferCall__Outputs {
  _call: MakeAcquisitionOfferCall;

  constructor(call: MakeAcquisitionOfferCall) {
    this._call = call;
  }
}

export class MigrateCall extends ethereum.Call {
  get inputs(): MigrateCall__Inputs {
    return new MigrateCall__Inputs(this);
  }

  get outputs(): MigrateCall__Outputs {
    return new MigrateCall__Outputs(this);
  }
}

export class MigrateCall__Inputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class MigrateCall__Outputs {
  _call: MigrateCall;

  constructor(call: MigrateCall) {
    this._call = call;
  }
}

export class NotifyOfferEndedCall extends ethereum.Call {
  get inputs(): NotifyOfferEndedCall__Inputs {
    return new NotifyOfferEndedCall__Inputs(this);
  }

  get outputs(): NotifyOfferEndedCall__Outputs {
    return new NotifyOfferEndedCall__Outputs(this);
  }
}

export class NotifyOfferEndedCall__Inputs {
  _call: NotifyOfferEndedCall;

  constructor(call: NotifyOfferEndedCall) {
    this._call = call;
  }
}

export class NotifyOfferEndedCall__Outputs {
  _call: NotifyOfferEndedCall;

  constructor(call: NotifyOfferEndedCall) {
    this._call = call;
  }
}

export class OnTokenTransferCall extends ethereum.Call {
  get inputs(): OnTokenTransferCall__Inputs {
    return new OnTokenTransferCall__Inputs(this);
  }

  get outputs(): OnTokenTransferCall__Outputs {
    return new OnTokenTransferCall__Outputs(this);
  }
}

export class OnTokenTransferCall__Inputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class OnTokenTransferCall__Outputs {
  _call: OnTokenTransferCall;

  constructor(call: OnTokenTransferCall) {
    this._call = call;
  }
}

export class RecoverCall extends ethereum.Call {
  get inputs(): RecoverCall__Inputs {
    return new RecoverCall__Inputs(this);
  }

  get outputs(): RecoverCall__Outputs {
    return new RecoverCall__Outputs(this);
  }
}

export class RecoverCall__Inputs {
  _call: RecoverCall;

  constructor(call: RecoverCall) {
    this._call = call;
  }

  get lostAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RecoverCall__Outputs {
  _call: RecoverCall;

  constructor(call: RecoverCall) {
    this._call = call;
  }
}

export class SetRecoverableCall extends ethereum.Call {
  get inputs(): SetRecoverableCall__Inputs {
    return new SetRecoverableCall__Inputs(this);
  }

  get outputs(): SetRecoverableCall__Outputs {
    return new SetRecoverableCall__Outputs(this);
  }
}

export class SetRecoverableCall__Inputs {
  _call: SetRecoverableCall;

  constructor(call: SetRecoverableCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetRecoverableCall__Outputs {
  _call: SetRecoverableCall;

  constructor(call: SetRecoverableCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferAndCallCall extends ethereum.Call {
  get inputs(): TransferAndCallCall__Inputs {
    return new TransferAndCallCall__Inputs(this);
  }

  get outputs(): TransferAndCallCall__Outputs {
    return new TransferAndCallCall__Outputs(this);
  }
}

export class TransferAndCallCall__Inputs {
  _call: TransferAndCallCall;

  constructor(call: TransferAndCallCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class TransferAndCallCall__Outputs {
  _call: TransferAndCallCall;

  constructor(call: TransferAndCallCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class UnwrapCall extends ethereum.Call {
  get inputs(): UnwrapCall__Inputs {
    return new UnwrapCall__Inputs(this);
  }

  get outputs(): UnwrapCall__Outputs {
    return new UnwrapCall__Outputs(this);
  }
}

export class UnwrapCall__Inputs {
  _call: UnwrapCall;

  constructor(call: UnwrapCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UnwrapCall__Outputs {
  _call: UnwrapCall;

  constructor(call: UnwrapCall) {
    this._call = call;
  }
}

export class WrapCall extends ethereum.Call {
  get inputs(): WrapCall__Inputs {
    return new WrapCall__Inputs(this);
  }

  get outputs(): WrapCall__Outputs {
    return new WrapCall__Outputs(this);
  }
}

export class WrapCall__Inputs {
  _call: WrapCall;

  constructor(call: WrapCall) {
    this._call = call;
  }

  get shareholder(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class WrapCall__Outputs {
  _call: WrapCall;

  constructor(call: WrapCall) {
    this._call = call;
  }
}
